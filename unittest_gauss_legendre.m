function test_gauss_legendre
% TEST_GAUSS_LEGENDRE Test the Gauss-Legendere quadrature methods.
%
% Example (<a href="matlab:run_example test_gauss_legendre">run</a>) 
%    test_gauss_legendre
%
% See also TESTSUITE

%   Elmar Zander
%   Copyright 2007, Institute of Scientific Computing, TU Braunschweig.
%   $Id$ 
%
%   This program is free software: you can redistribute it and/or modify it
%   under the terms of the GNU General Public License as published by the
%   Free Software Foundation, either version 3 of the License, or (at your
%   option) any later version. 
%   See the GNU General Public License for more details. You should have
%   received a copy of the GNU General Public License along with this
%   program.  If not, see <http://www.gnu.org/licenses/>.


assert_set_function( 'gauss_legendre_rule' );

for p=1:6
    % generated by the mathematica program: integration_rules.m
    % better not modify (rather regenerate or change the program)
    switch p
        case 1
            xi=[0];
            wi=[2.0000000000000000000];
        case 2
            xi=[-0.57735026918962576451; 0.57735026918962576451];
            wi=[1.0000000000000000000; 1.0000000000000000000];
        case 3
            xi=[-0.77459666924148337704; 0; 0.77459666924148337704];
            wi=[0.55555555555555555556; 0.88888888888888888889; 0.55555555555555555556];
        case 4
            xi=[-0.86113631159405257522; -0.33998104358485626480; 0.33998104358485626480; 0.86113631159405257522];
            wi=[0.34785484513745385737; 0.65214515486254614263; 0.65214515486254614263; 0.34785484513745385737];
        case 5
            xi=[-0.90617984593866399280; -0.53846931010568309104; 0; 0.53846931010568309104; 0.90617984593866399280];
            wi=[0.23692688505618908751; 0.47862867049936646804; 0.56888888888888888889; 0.47862867049936646804; 0.23692688505618908751];
        case 6
            xi=[-0.93246951420315202781; -0.66120938646626451366; -0.23861918608319690863; 0.23861918608319690863; 0.66120938646626451366; 0.93246951420315202781];
            wi=[0.17132449237917034504; 0.36076157304813860757; 0.46791393457269104739; 0.46791393457269104739; 0.36076157304813860757; 0.17132449237917034504];
    end
    % end of: better not modify
    [x,w]=gauss_legendre_rule( p );
    assert_equals( x, xi, sprintf('xi_%d',p) ); 
    assert_equals( w, wi, sprintf('wi_%d',p) ); 
end


    
assert_set_function( 'gauss_legendre_triangle_rule' );

%TODO: put some real test code herein. also for 1d GL-function
[A,B,I]=testGaussTriangle(5);
assert_equals(I.*A, I.*B );



function [A,B,I]=testGaussTriangle(p)
[x,w]=gauss_legendre_triangle_rule(p);
N=2*p;
A=zeros(N+1);
B=zeros(N+1);
I=zeros(N+1);
for l=0:N; 
    for k=0:N; 
        A(l+1,k+1)=sum(x(:,1).^l.*x(:,2).^k.*w);
        %numIntegrate( @(xx)(xx(1)^l*xx(2)^k), x, w ); 
        B(l+1,k+1)=prod((1:l)./((k+1):(k+l)))/((k+l+1)*(k+l+2));
        I(l+1,k+1)=(l+k<=2*p-2);
    end; 
end; 
