function unittest_gauss_hermite
% UNITTEST_GAUSS_HERMITE Test the Gauss-Hermite quadrature rules.
%
% Example (<a href="matlab:run_example unittest_gauss_hermite">run</a>)
%    unittest_gauss_hermite
%
% See also TESTSUITE

%   Elmar Zander
%   Copyright 2007, Institute of Scientific Computing, TU Braunschweig.
%   $Id$ 
%
%   This program is free software: you can redistribute it and/or modify it
%   under the terms of the GNU General Public License as published by the
%   Free Software Foundation, either version 3 of the License, or (at your
%   option) any later version. 
%   See the GNU General Public License for more details. You should have
%   received a copy of the GNU General Public License along with this
%   program.  If not, see <http://www.gnu.org/licenses/>.


assert_set_function( 'gauss_hermite_rule' );

for p=1:6
    % polynomial system: HermiteH2
    % generated by the mathematica program: integration_rules.m
    % better not modify (rather regenerate or change the program)
    switch p
        case 1
            xi=[0];
            wi=[1.];
        case 2
            xi=[-1.; 1.];
            wi=[0.5; 0.5];
        case 3
            xi=[-1.7320508075688772935; 0; 1.7320508075688772935];
            wi=[0.16666666666666666667; 0.66666666666666666667; 0.16666666666666666667];
        case 4
            xi=[-2.3344142183389772393; -0.74196378430272585765; 0.74196378430272585765; 2.3344142183389772393];
            wi=[0.045875854768068491817; 0.45412414523193150818; 0.45412414523193150818; 0.045875854768068491817];
        case 5
            xi=[-2.8569700138728056542; -1.3556261799742658658; 0; 1.3556261799742658658; 2.8569700138728056542];
            wi=[0.011257411327720688933; 0.2220759220056126444; 0.53333333333333333333; 0.2220759220056126444; 0.011257411327720688933];
        case 6
            xi=[-3.3242574335521189524; -1.8891758777537106755; -0.61670659019259415219; 0.61670659019259415219; 1.8891758777537106755; 3.3242574335521189524];
            wi=[0.0025557844020562464306; 0.088615746041914527481; 0.40882846955602922609; 0.40882846955602922609; 0.088615746041914527481; 0.0025557844020562464306];
    end
    % end of: better not modify
    [x,w]=gauss_hermite_rule( p );
    assert_equals( x, xi, sprintf('xi_%d',p) );
    assert_equals( w, wi, sprintf('wi_%d',p) );
end



assert_set_function( 'gauss_hermite' );

% Calculate integral of monomials with Gaussian weighting function. The
% result for x^i should be 0 for odd i and (i-1)!! for even i where
% n!!=1x3x5x...xn.
expect=@(n)( mod(n-1,2)*prod(1:2:(n-1)) );

for i=0:10
    f={@power,{i},{2}};
    p=ceil((i+1)/2);
    assert_equals( gauss_hermite(f,p), expect(i), sprintf('order_%d',i) );
end


% Testing multidimension gauss hermite quadrature
% (Since the integrand simply factors the results should be the same as the
% products of the single integrations.)
clear a b
a=zeros(5,5);
b=a; 
for i=0:4; 
    for j=0:4; 
        f3=@(x,i,j)(x(1)^i*x(2)^j);
        f={f3,{i,j},{2,3}};
        a(i+1,j+1)=gauss_hermite_multi( f, 2, 4 ); 
        b(i+1,j+1)=expect(i)*expect(j);
    end; 
end; 
assert_equals( a, b, 'gauss_hermite_multi' );

% This should give e
int=gauss_hermite_multi( @(x)(exp(x(1)+x(2))), 2, 6);
assert_equals( int, exp(1), 'gauss_hermite_multi', struct('abstol', 1e-5) );

